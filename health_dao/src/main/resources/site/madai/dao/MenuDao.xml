<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="site.madai.dao.MenuDao">
    <sql id="all">
        `id`, `name`, `linkUrl`, `path`, `priority`, `icon`, `description`,
        `parentMenuId`,`level`
    </sql>

    <select id="getMenusByUsername" parameterType="string"
            resultMap="getMenusByRoleIdMap">
        select
        <include refid="all"/>
         from t_menu where level = 1 and id in
         (select menu_id from t_role_menu where role_id in (select role_id
        from t_user_role where user_id in (select id from t_user where
        username = #{username})))
    </select>

    <!--二级菜单属性-->
    <resultMap id="SbaseMap" type="map">
        <result column="linkUrl" property="linkUrl"/>
        <result column="name" property="title"/>
        <result column="path" property="path"/>
    </resultMap>
    <select id="getSMenusByFMenuId" parameterType="int"
            resultMap="SbaseMap">
        select
        <include refid="all"/>
        from t_menu where level = 2 and parentMenuId = #{parentMenuId}
    </select>

    <!--基本属性-->
    <resultMap id="baseMap" type="map">
        <id column="id" property="id"/>
        <result column="name" property="title"/>
        <result column="icon" property="icon"/>
        <result column="path" property="path"/>
    </resultMap>
    <!--菜单自关联属性-->
    <resultMap id="getMenusByRoleIdMap" type="map"
               extends="baseMap">
        <collection property="children" column="id" ofType="map"
                    select="getSMenusByFMenuId"/>
    </resultMap>

    <!--分页条件查询-->
    <select id="findByCondition" parameterType="string" resultType="HashMap">
        select m.id id, m.name name, m.linkUrl linkUrl, m.icon icon, m.description description, m.level level,n.name parentName from t_menu m left join t_menu n on m.`parentMenuId` = n.`id`
        <where>
            <if test="value != null and value.length > 0">
                m.name like CONCAT('%',#{value},'%')
            </if>
        </where>
    </select>

    <select id="findAllParentmenu" resultType="menu">
        select
        <include refid="all"/>
        from t_menu where level = 1
    </select>

    <select id="getMenuCountByLevelAndParentId" parameterType="int"
            resultType="int">
        select count(0) from t_menu
        <where>
            <if test="level != null">
                level = #{level}
            </if>
            <if test="parentMenuId != null">
                and parentMenuId = #{parentMenuId}
            </if>
        </where>
    </select>

    <insert id="add" parameterType="menu">
        <selectKey resultType="Integer" order="AFTER" keyProperty="id">
            SELECT LAST_INSERT_ID()
        </selectKey>
        INSERT INTO `t_menu` (`name`, `linkUrl`, `path`, `priority`, `icon`, `description`, `parentMenuId`, `level`)
VALUES
	(#{name},#{linkUrl},#{path},#{priority},#{icon},#{description},#{parentMenuId},#{level});
    </insert>

    <select id="getMenuById" parameterType="int" resultType="menu">
        select
        <include refid="all"/>
        from t_menu where id = #{parentMenuId}
    </select>

    <select id="findparentMenuIdsById" parameterType="int"
            resultType="int">
        select parentMenuId from t_menu where id = #{id};
    </select>

    <delete id="delMenuAndRoleBymenuId" parameterType="int">
        delete from t_role_menu where menu_id = #{menu_id}
    </delete>

    <delete id="delMenuById" parameterType="int">
        delete from t_menu where id = #{id}
    </delete>

    <select id="getchildmenuCountBy" parameterType="int" resultType="int">
        select count(0) from t_menu where parentMenuId = #{id};
    </select>

    <select id="findAllMenu" resultType="HashMap">
        select m.`id`, m.`name`, m.`linkUrl`, m.`path`, m.`priority`, m.`icon`, m.`description`, m.`parentMenuId`, m.`level`,n.`name` parentName from t_menu m left join t_menu n on n.id = m.`parentMenuId`
    </select>

</mapper>